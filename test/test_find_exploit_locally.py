import unittest
from src.kernelpop import potentially_vulnerable, find_exploit_locally, total_exploits
from src.kernelpop import Kernel
from exploits.linux.CVE20091185 import CVE20091185
from exploits.linux.CVE20171000371 import CVE20171000371
from constants import HIGH_RELIABILITY, CONFIRMED_VULNERABLE, POTENTIALLY_VULNERABLE, NOT_VULNERABLE


class TestGetKernelVersion(unittest.TestCase):

	def test_potentially_vulnerable(self):
		test_uname = "Linux-4.10.0-37-generic-x86_64-with-Ubuntu-16.04-xenial"
		test_kernel = Kernel(test_uname)
		exploit_module = CVE20091185()
		self.assertEqual(potentially_vulnerable(test_kernel, exploit_module), NOT_VULNERABLE)

	def test_find_exploit_locally(self):
		test_uname = "Linux-4.10.0-1-generic-x86_64-with-Ubuntu-16.04-xenial"
		test_kernel = Kernel(test_uname)
		exploit_results = find_exploit_locally(test_kernel)
		self.assertGreaterEqual(len(exploit_results["confirmed"][HIGH_RELIABILITY]), 1)

	def test_architecture_not_matching(self):
		test_uname = "Linux-4.10.0-1-generic-x86_64-with-Ubuntu-16.04-xenial"
		test_kernel = Kernel(test_uname)
		exploit_module = CVE20171000371()
		self.assertEqual(potentially_vulnerable(test_kernel, exploit_module), NOT_VULNERABLE)

	def test_architecture_matching(self):
		test_uname = "Linux-4.10.0-1-generic-i686-with-Ubuntu-16.04-xenial"
		test_kernel = Kernel(test_uname)
		exploit_module = CVE20171000371()
		vuln_results = potentially_vulnerable(test_kernel, exploit_module)
		self.assertEqual(vuln_results, CONFIRMED_VULNERABLE)

	def test_patched_kernel_matching(self):
		test_uname = "Linux-4.99.0-1-generic-i686-with-Ubuntu-16.04-xenial"
		test_kernel = Kernel(test_uname)
		exploit_results = find_exploit_locally(test_kernel)
		self.assertTrue(total_exploits(exploit_results["confirmed"]) < 1)

	def test_vulnerable_kernel_matching(self):
		# TODO: this kernel is not vulnerable to any of the exploits in the project, but is listed as vulnerable
		# TODO:		we need to unfortunately track down the kernel windows for each specific exploit for each
		# TODO:		specific distro for each specific kernel (i.e. 4.4.0-0 -> 4.4.x-last_patch)
		test_uname = 'Linux-4.4.0-75-generic-x86_64-with-Ubuntu-16.04-xenial'
		test_kernel = Kernel(test_uname)
		exploit_results = find_exploit_locally(test_kernel)
		self.assertTrue(total_exploits(exploit_results["confirmed"]) == 0)


if __name__ ==  "__main__":
	unittest.main()
