"""
Base exploit class
"""
import os
import subprocess
from constants import LOW_RELIABILITY, PLAYGROUND_PATH, color_print, ARCHITECTURE_GENERIC, LINUX_EXPLOIT_SOURCE_PATH, \
	MAC_EXPLOIT_PATH

class LinuxExploit:
	def __init__(self):
		self.name = "CVE-WHOOPS-LINUX-BASE-CLASS"
		self.e_type = "linux"
		self.brief_desc = "A base class for linux exploits"
		self.reliability = LOW_RELIABILITY
		self.vulnerable_base = None
		self.vulnerable_kernels = []
		self.exploit_kernels = []
		self.architecture = ARCHITECTURE_GENERIC
		self.source_c_path = os.path.join(LINUX_EXPLOIT_SOURCE_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = ["gcc", "-o", self.compilation_path, self.source_c_path]
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[-] system appears not to be vulnerable to {}".format(self.name), color="red")
		return False

	def shell_results(self, shell_command):
		p = subprocess.Popen(
			shell_command,
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			shell=True
		)
		return p.communicate()

	def exploit_failure(self, failure_reason):
		color_print("\t[-] exploitation failed: {}".format(failure_reason), color="red")

	def compilation_successful(self):
		if os.path.isfile(self.compilation_path):
			return True
		else:
			return False

	def exploit_compile(self):
		color_print("\t[*] compiling exploit {} to {}".format(self.name, self.compilation_path), color="blue")
		color_print("\t[*] {}".format(self.compilation_command), color="blue")
		compilation_results = self.shell_results(self.compilation_command)
		if self.compilation_successful():
			color_print("\t[+] compilation successful!", color="green")
		else:
			self.exploit_failure("failed to compile exploit {}".format(self.name))

	def exploit(self):
		perform_exploitation = str(input("Would you like to run exploit {} on this system? (y/n): ".format(self.name)))
		if "y" in perform_exploitation.lower():
			self.exploit_compile()
			if self.compilation_successful():
				color_print("\t[*] performing exploitation of {}".format(self.name))
				try:
					subprocess.call(self.exploit_command)
				except:
					self.exploit_failure("exploitation interrupted")
		else:
			self.exploit_failure("canceled execution of exploit {}".format(self.name))

class MacExploit:
	def __init__(self):
		self.name = "CVE-WHOOPS-MAC-BASE-CLASS"
		self.e_type = "mac"
		self.brief_desc = "A base class for mac exploits"
		self.reliability = LOW_RELIABILITY
		self.vulnerable_kernels = []
		self.architecture = ARCHITECTURE_GENERIC
		self.source_c_path = os.path.join(MAC_EXPLOIT_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = ["gcc", "-o", self.compilation_path, self.source_c_path]
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[-] system appears not to be vulnerable to {}".format(self.name), color="red")
		return False

	def shell_results(self, shell_command):
		p = subprocess.Popen(
			shell_command,
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			shell=True
		)
		return p.communicate()

	def exploit_failure(self, failure_reason):
		color_print("\t[-] exploitation failed: {}".format(failure_reason), color="red")

	def compilation_successful(self):
		if os.path.isfile(self.compilation_path):
			return True
		else:
			return False

	def exploit_compile(self):
		color_print("\t[*] compiling exploit {} to {}".format(self.name, self.compilation_path), color="blue")
		color_print("\t[*] {}".format(self.compilation_command), color="blue")
		compilation_results = self.shell_results(self.compilation_command)
		if self.compilation_successful():
			color_print("\t[+] compilation successful!", color="green")
		else:
			self.exploit_failure("failed to compile exploit {}".format(self.name))

	def exploit(self):
		perform_exploitation = str(input("Would you like to run exploit {} on this system? (y/n): ".format(self.name)))
		if "y" in perform_exploitation.lower():
			self.exploit_compile()
			if self.compilation_successful():
				color_print("\t[*] performing exploitation of {}".format(self.name))
				try:
					subprocess.call(self.exploit_command)
				except:
					self.exploit_failure("exploitation interrupted")
		else:
			self.exploit_failure("canceled execution of exploit {}".format(self.name))