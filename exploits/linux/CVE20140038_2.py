"""
https://www.exploit-db.com/raw/31347/
Tested on Ubuntu 13 only
"""
import os
from exploits.exploit import LinuxExploit
from src.kernels import KernelWindow
from constants import *


class CVE20140038_2(LinuxExploit):
	def __init__(self):
		super().__init__()
		self.name = "CVE20140038_2"
		self.formatted_name = "CVE-2014-0038"
		self.e_type = "linux"
		self.brief_desc = "recvmmsg syscall issues in x86_32 can lead to root (timeoutpwn)"
		self.reliability = MEDIUM_RELIABILITY
		self.vulnerable_base = KernelWindow(GENERIC_LINUX, BASE_VULNERABLE, 0, 0, 0, 3, 13, 2)
		self.vulnerable_kernels = [
			KernelWindow(SUSE, VERSION_VULNERABLE, 0, 0, 0, 3, 11, 10),  	# kernel-desktop-3.11.10-7.1
			KernelWindow(RHEL, NOT_VULNERABLE, 0, 0, 0, 5, 0, 0)
		]
		self.exploit_kernels = [
			# KernelWindow(UBUNTU_13, EXPLOIT_AVAILABLE, 3, 11, 0, 3, 11, 1), 	# 3.11.0-15-generic
			# KernelWindow(UBUNTU_13, EXPLOIT_AVAILABLE, 3, 8, 0, 3, 8, 1), 	# 3.8.0-19-generic
			KernelWindow(UBUNTU_13, EXPLOIT_AVAILABLE, 0, 0, 0, 5, 0, 0)
		]
		self.architecture = ARCHITECTURE_i686
		self.source_c_path = os.path.join(LINUX_EXPLOIT_SOURCE_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = "gcc -o {} {}".format(self.compilation_path, self.source_c_path)
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[-] system appears to be vulnerable to {}".format(self.name), color="green")
		return True
