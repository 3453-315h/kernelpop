"""
https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt
"""
import os
from exploits.exploit import LinuxExploit
from src.kernels import KernelWindow
from constants import *


class CVE20171000370(LinuxExploit):
	def __init__(self):
		LinuxExploit.__init__(self)
		self.name = "CVE20171000370"
		self.formatted_name = "CVE-2017-1000370"
		self.e_type = "linux"
		self.brief_desc = "Stack clash vulnerability from qualys "
		self.reliability = HIGH_RELIABILITY
		self.vulnerable_base = KernelWindow(GENERIC_LINUX, BASE_VULNERABLE, 4, 11, 5, 4, 11, 5)
		self.vulnerable_kernels = [
			KernelWindow(UBUNTU_17, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(UBUNTU_16, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(UBUNTU_14, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(DEBIAN_10, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0, highest_patch_level="4.11.11-1"),
			KernelWindow(DEBIAN_9, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0, highest_patch_level="4.9.30-2+deb9u5"),
			KernelWindow(DEBIAN_8, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0, highest_patch_level="3.16.43-2+deb8u5"),
			KernelWindow(FEDORA, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(CENTOS, VERSION_VULNERABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
		]
		self.exploit_kernels = [
			KernelWindow(UBUNTU_17, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(UBUNTU_16, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(UBUNTU_14, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(DEBIAN_10, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0, highest_patch_level="4.11.11-1"),
			KernelWindow(DEBIAN_9, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0, highest_patch_level="4.9.30-2+deb9u5"),
			KernelWindow(DEBIAN_8, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0, highest_patch_level="3.16.43-2+deb8u5"),
			KernelWindow(FEDORA, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
			KernelWindow(CENTOS, EXPLOIT_AVAILABLE, 0, 0, 0, KERNEL_MAJOR_VERSION_CAP+1, 0, 0),
		]
		self.architecture = ARCHITECTURE_i686
		self.source_c_path = os.path.join(LINUX_EXPLOIT_SOURCE_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH,"{}{}".format(self.name, ".so"))
		self.compilation_command = "gcc -fpic -shared -nostdlib -Os -s -o {} {}".format(
									self.compilation_path, self.source_c_path)
		self.exploit_command = "xxd -i {} > {}.h".format(self.compilation_path, self.compilation_path)

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[+] system appears to be vulnerable to {}".format(self.name), color="green")
		return True

	def exploit(self):
		self.exploit_failure("this requires manual exploitation. review source at {}".format(self.source_c_path))
