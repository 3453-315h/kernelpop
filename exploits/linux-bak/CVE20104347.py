import os
import uuid
import subprocess
from exploits.exploit import LinuxExploit
from src.kernels import KernelWindow
from constants import *


class CVE20104347(LinuxExploit):
	def __init__(self):
		super().__init__()
		self.name = "CVE20104347"
		self.formatted_name = "CVE-2010-4347"
		self.e_type = "linux"
		self.brief_desc = "american-sign-language ACPI LID root exploit"
		self.reliability = MEDIUM_RELIABILITY
		self.vulnerable_base = KernelWindow(GENERIC_LINUX, CONFIRMED_VULNERABLE, 0, 0, 0, 2, 6, 36)
		self.vulnerable_kernels = [
			# marking all but rhel as confirmed, but not sure
			KernelWindow(SUSE, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34), 			# 2.6.34.7-0.7.1.i586.rpm
			KernelWindow(UBUNTU_GENERIC, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  # unconfirmed
			KernelWindow(UBUNTU_GENERIC, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34), 	# unconfirmed
			KernelWindow(DEBIAN_GENERIC, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  # unconfirmed
			KernelWindow(ARCH, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  			# unconfirmed
			KernelWindow(RHEL, NOT_VULNERABLE, 2, 6, 0, 2, 6, 34),  				# unconfirmed
			KernelWindow(FEDORA, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  			# unconfirmed
			KernelWindow(GENTOO, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  			# unconfirmed
			KernelWindow(SOLARIS, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  			# unconfirmed
			KernelWindow(OPENBSD, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  			# unconfirmed
			KernelWindow(OPENBSD, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  			# unconfirmed
			KernelWindow(NETBSD, CONFIRMED_VULNERABLE, 2, 6, 0, 2, 6, 34),  			# unconfirmed
		]
		self.exploit_kernels = [
			KernelWindow(GENERIC_LINUX, CONFIRMED_VULNERABLE, 0, 0, 0, 2, 6, 32) 	# 2.6.37-rc2
		]
		self.architecture = ARCHITECTURE_x86_64
		self.source_c_path = os.path.join(LINUX_EXPLOIT_SOURCE_PATH, "{}.c".format(self.name))
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = "gcc -o {} {}".format(self.compilation_path, self.source_c_path)
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# we need to check to see if there is anything at /proc/acpi/button/lid/LID/state
		lid_path = "/proc/acpi/button/lid/LID/state"
		color_print("\t[*] checking to see if ACPI lid device is present on system")
		if os.path.isfile(lid_path):
			color_print("\t[+] system appears to be vulnerable to {}".format(self.name), color="green")
			return True
		else:
			color_print("\t[-] system appears not to be vulnerable to {}".format(self.name), color="red")
			return False
